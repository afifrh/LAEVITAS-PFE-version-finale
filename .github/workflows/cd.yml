name: CD - Déploiement Continu

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  # Job 1: Build et publication des images Docker
  build-and-push:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📋 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            
      - name: 📋 Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            
      - name: 📋 Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            
      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🏗️ Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 2: Déploiement en staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.laevitas.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup deployment tools
        run: |
          # Install deployment tools (kubectl, helm, etc.)
          echo "Setting up deployment tools..."
          
      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Backend image: ${{ needs.build-and-push.outputs.backend-image }}"
          echo "Frontend image: ${{ needs.build-and-push.outputs.frontend-image }}"
          
          # Example deployment commands:
          # kubectl set image deployment/backend backend=${{ needs.build-and-push.outputs.backend-image }}
          # kubectl set image deployment/frontend frontend=${{ needs.build-and-push.outputs.frontend-image }}
          # kubectl rollout status deployment/backend
          # kubectl rollout status deployment/frontend
          
      - name: 🧪 Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke tests here
          # curl -f https://staging.laevitas.com/health
          # curl -f https://staging.laevitas.com/api/markets

  # Job 3: Tests de performance
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: ⚡ Run performance tests
        run: |
          echo "Running performance tests..."
          # Add performance testing tools like k6, Artillery, etc.
          # k6 run performance-tests/load-test.js
          
      - name: 📊 Upload performance results
        run: |
          echo "Uploading performance test results..."
          # Upload results to monitoring system

  # Job 4: Déploiement en production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging, performance-tests]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://laevitas.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup deployment tools
        run: |
          echo "Setting up production deployment tools..."
          
      - name: 🌟 Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Backend image: ${{ needs.build-and-push.outputs.backend-image }}"
          echo "Frontend image: ${{ needs.build-and-push.outputs.frontend-image }}"
          
          # Production deployment with blue-green or canary strategy
          # kubectl apply -f k8s/production/
          # kubectl set image deployment/backend backend=${{ needs.build-and-push.outputs.backend-image }}
          # kubectl set image deployment/frontend frontend=${{ needs.build-and-push.outputs.frontend-image }}
          
      - name: 🧪 Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # curl -f https://laevitas.com/health
          # curl -f https://laevitas.com/api/markets
          
      - name: 📢 Notify deployment success
        run: |
          echo "✅ Production deployment successful!"
          # Send notifications to Slack, Discord, etc.

  # Job 5: Rollback en cas d'échec
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure() && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
    
    steps:
      - name: 🔄 Rollback production deployment
        run: |
          echo "Rolling back production deployment..."
          # kubectl rollout undo deployment/backend
          # kubectl rollout undo deployment/frontend
          
      - name: 📢 Notify rollback
        run: |
          echo "⚠️ Production rollback executed!"
          # Send critical notifications

  # Job 6: Mise à jour de la documentation
  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📚 Generate API documentation
        run: |
          echo "Generating API documentation..."
          # cd backend && npm run docs:generate
          
      - name: 📚 Update changelog
        run: |
          echo "Updating changelog..."
          # Generate changelog from commits
          
      - name: 📤 Deploy documentation
        run: |
          echo "Deploying documentation..."
          # Deploy to GitHub Pages or documentation site

  # Job 7: Nettoyage des anciennes images
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 🧹 Clean up old images
        run: |
          echo "Cleaning up old container images..."
          # Keep only the last 5 versions
          # Use GitHub API to delete old packages

  # Job 8: Métriques et monitoring
  metrics:
    name: 📊 Metrics & Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📊 Update deployment metrics
        run: |
          echo "Updating deployment metrics..."
          # Send metrics to monitoring system
          # Update deployment frequency, success rate, etc.
          
      - name: 🔔 Setup alerts
        run: |
          echo "Setting up post-deployment alerts..."
          # Configure monitoring alerts for the new version
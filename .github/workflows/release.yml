name: Release - Création automatique

on:
  push:
    branches: [ main ]
    paths:
      - 'package.json'
      - 'backend/package.json'
      - 'frontend/package.json'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version à créer (ex: 1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type de release'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      prerelease:
        description: 'Marquer comme pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Détection des changements de version
  detect-version:
    name: 🔍 Detect Version Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.check.outputs.new_version }}
      previous_version: ${{ steps.check.outputs.previous_version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: 🔍 Check version changes
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "previous_version=$(git describe --tags --abbrev=0 2>/dev/null || echo 'v0.0.0')" >> $GITHUB_OUTPUT
          else
            # Check if package.json version changed
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

  # Job 2: Génération du changelog
  generate-changelog:
    name: 📝 Generate Changelog
    runs-on: ubuntu-latest
    needs: detect-version
    if: needs.detect-version.outputs.should_release == 'true'
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG="${{ needs.detect-version.outputs.previous_version }}"
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -i "feat\|feature\|add" || true)
          FIXES=$(echo "$COMMITS" | grep -i "fix\|bug\|patch" || true)
          IMPROVEMENTS=$(echo "$COMMITS" | grep -i "improve\|enhance\|update\|refactor" || true)
          OTHERS=$(echo "$COMMITS" | grep -v -i "feat\|feature\|add\|fix\|bug\|patch\|improve\|enhance\|update\|refactor" || true)
          
          # Build changelog
          CHANGELOG="## 🚀 Version ${{ needs.detect-version.outputs.new_version }}\n\n"
          
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### ✨ Nouvelles fonctionnalités\n${FEATURES}\n\n"
          fi
          
          if [ ! -z "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### 🐛 Corrections de bugs\n${FIXES}\n\n"
          fi
          
          if [ ! -z "$IMPROVEMENTS" ]; then
            CHANGELOG="${CHANGELOG}### 🔧 Améliorations\n${IMPROVEMENTS}\n\n"
          fi
          
          if [ ! -z "$OTHERS" ]; then
            CHANGELOG="${CHANGELOG}### 📝 Autres changements\n${OTHERS}\n\n"
          fi
          
          # Save changelog to file and output
          echo -e "$CHANGELOG" > changelog.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 📤 Upload changelog artifact
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: changelog.md

  # Job 3: Tests avant release
  pre-release-tests:
    name: 🧪 Pre-Release Tests
    runs-on: ubuntu-latest
    needs: detect-version
    if: needs.detect-version.outputs.should_release == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
          
      - name: 🧪 Run all tests
        run: |
          echo "Running comprehensive test suite..."
          cd backend && npm test
          cd ../frontend && npm test -- --watchAll=false
          
      - name: 🏗️ Test build
        run: |
          echo "Testing build process..."
          cd frontend && npm run build
          cd ../backend && echo "Backend build test passed"

  # Job 4: Création de la release
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [detect-version, generate-changelog, pre-release-tests]
    if: needs.detect-version.outputs.should_release == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog
          
      - name: 🏷️ Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ needs.detect-version.outputs.new_version }}" -m "Release v${{ needs.detect-version.outputs.new_version }}"
          git push origin "v${{ needs.detect-version.outputs.new_version }}"
          
      - name: 📦 Create release assets
        run: |
          # Create release assets
          mkdir -p release-assets
          
          # Package source code
          tar -czf release-assets/laevitas-v${{ needs.detect-version.outputs.new_version }}-source.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='*/node_modules' \
            --exclude='.github' \
            --exclude='release-assets' \
            .
            
          # Create deployment package
          cp docker-compose.yml release-assets/
          cp docker-compose.prod.yml release-assets/ 2>/dev/null || true
          cp -r scripts release-assets/ 2>/dev/null || true
          
          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt
          
      - name: 🚀 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.detect-version.outputs.new_version }}
          release_name: 🚀 Laevitas v${{ needs.detect-version.outputs.new_version }}
          body: |
            ${{ needs.generate-changelog.outputs.changelog }}
            
            ## 📦 Assets
            - `laevitas-v${{ needs.detect-version.outputs.new_version }}-source.tar.gz` - Code source complet
            - `docker-compose.yml` - Configuration Docker
            - `checksums.txt` - Sommes de contrôle SHA256
            
            ## 🐳 Images Docker
            Les images Docker sont automatiquement construites et publiées sur GitHub Container Registry :
            - `ghcr.io/${{ github.repository }}-backend:v${{ needs.detect-version.outputs.new_version }}`
            - `ghcr.io/${{ github.repository }}-frontend:v${{ needs.detect-version.outputs.new_version }}`
            
            ## 🚀 Déploiement
            ```bash
            # Télécharger et déployer
            wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.detect-version.outputs.new_version }}/docker-compose.yml
            docker-compose up -d
            ```
            
            ## 📊 Métriques de cette release
            - Commits inclus : $(git rev-list ${{ needs.detect-version.outputs.previous_version }}..v${{ needs.detect-version.outputs.new_version }} --count)
            - Contributeurs : $(git shortlog -sn ${{ needs.detect-version.outputs.previous_version }}..v${{ needs.detect-version.outputs.new_version }} | wc -l)
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          
      - name: 📤 Upload release assets
        run: |
          # Upload each asset to the release
          for file in release-assets/*; do
            echo "Uploading $(basename $file)..."
            # Use GitHub CLI or API to upload assets
          done

  # Job 5: Mise à jour post-release
  post-release:
    name: 📋 Post-Release Updates
    runs-on: ubuntu-latest
    needs: [detect-version, create-release]
    if: needs.detect-version.outputs.should_release == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📋 Update CHANGELOG.md
        run: |
          # Download and prepend to existing CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md CHANGELOG.md.bak
          fi
          
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          cat changelog.md >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -f CHANGELOG.md.bak ]; then
            tail -n +2 CHANGELOG.md.bak >> CHANGELOG.md
            rm CHANGELOG.md.bak
          fi
          
      - name: 📋 Update version badges
        run: |
          # Update README.md with new version badge
          if [ -f README.md ]; then
            sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${{ needs.detect-version.outputs.new_version }}/g" README.md
          fi
          
      - name: 💾 Commit updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md README.md
          git commit -m "📋 Update changelog and badges for v${{ needs.detect-version.outputs.new_version }}" || exit 0
          git push origin main

  # Job 6: Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [detect-version, create-release, post-release]
    if: always() && needs.detect-version.outputs.should_release == 'true'
    
    steps:
      - name: 📢 Notify success
        if: needs.create-release.result == 'success'
        run: |
          echo "✅ Release v${{ needs.detect-version.outputs.new_version }} created successfully!"
          # Add Slack, Discord, or email notifications here
          
      - name: 📢 Notify failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "❌ Failed to create release v${{ needs.detect-version.outputs.new_version }}"
          # Add failure notifications here
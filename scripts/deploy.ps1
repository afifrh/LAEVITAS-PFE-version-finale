# Script de d√©ploiement pour Laevitas Trading Platform
# Usage: .\scripts\deploy.ps1 -Version "1.5.0" -Environment "production"

param(
    [Parameter(Mandatory=$true)]
    [string]$Version,
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("development", "staging", "production")]
    [string]$Environment = "development",
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipTests = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipBuild = $false
)

# Configuration
$ProjectRoot = Split-Path -Parent $PSScriptRoot
$FrontendPath = Join-Path $ProjectRoot "frontend"
$BackendPath = Join-Path $ProjectRoot "backend"

Write-Host "üöÄ D√©ploiement de Laevitas Trading Platform v$Version" -ForegroundColor Green
Write-Host "üìÅ R√©pertoire: $ProjectRoot" -ForegroundColor Cyan
Write-Host "üåç Environnement: $Environment" -ForegroundColor Cyan

# Fonction pour v√©rifier les pr√©requis
function Test-Prerequisites {
    Write-Host "üîç V√©rification des pr√©requis..." -ForegroundColor Yellow
    
    # V√©rifier Node.js
    try {
        $nodeVersion = node --version
        Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
    } catch {
        Write-Error "‚ùå Node.js n'est pas install√©"
        exit 1
    }
    
    # V√©rifier npm
    try {
        $npmVersion = npm --version
        Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
    } catch {
        Write-Error "‚ùå npm n'est pas install√©"
        exit 1
    }
    
    # V√©rifier Git
    try {
        $gitVersion = git --version
        Write-Host "‚úÖ Git: $gitVersion" -ForegroundColor Green
    } catch {
        Write-Error "‚ùå Git n'est pas install√©"
        exit 1
    }
}

# Fonction pour installer les d√©pendances
function Install-Dependencies {
    Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
    
    # Backend
    Write-Host "üì¶ Installation des d√©pendances backend..." -ForegroundColor Cyan
    Set-Location $BackendPath
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå √âchec de l'installation des d√©pendances backend"
        exit 1
    }
    
    # Frontend
    Write-Host "üì¶ Installation des d√©pendances frontend..." -ForegroundColor Cyan
    Set-Location $FrontendPath
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå √âchec de l'installation des d√©pendances frontend"
        exit 1
    }
    
    Set-Location $ProjectRoot
    Write-Host "‚úÖ D√©pendances install√©es avec succ√®s" -ForegroundColor Green
}

# Fonction pour ex√©cuter les tests
function Invoke-Tests {
    if ($SkipTests) {
        Write-Host "‚è≠Ô∏è Tests ignor√©s" -ForegroundColor Yellow
        return
    }
    
    Write-Host "üß™ Ex√©cution des tests..." -ForegroundColor Yellow
    
    # Tests backend
    Write-Host "üß™ Tests backend..." -ForegroundColor Cyan
    Set-Location $BackendPath
    if (Test-Path "package.json") {
        $packageJson = Get-Content "package.json" | ConvertFrom-Json
        if ($packageJson.scripts.test) {
            npm test
            if ($LASTEXITCODE -ne 0) {
                Write-Error "‚ùå √âchec des tests backend"
                exit 1
            }
        } else {
            Write-Host "‚ö†Ô∏è Aucun script de test d√©fini pour le backend" -ForegroundColor Yellow
        }
    }
    
    # Tests frontend
    Write-Host "üß™ Tests frontend..." -ForegroundColor Cyan
    Set-Location $FrontendPath
    if (Test-Path "package.json") {
        $packageJson = Get-Content "package.json" | ConvertFrom-Json
        if ($packageJson.scripts.test) {
            npm test -- --coverage --watchAll=false
            if ($LASTEXITCODE -ne 0) {
                Write-Error "‚ùå √âchec des tests frontend"
                exit 1
            }
        } else {
            Write-Host "‚ö†Ô∏è Aucun script de test d√©fini pour le frontend" -ForegroundColor Yellow
        }
    }
    
    Set-Location $ProjectRoot
    Write-Host "‚úÖ Tests r√©ussis" -ForegroundColor Green
}

# Fonction pour construire l'application
function Build-Application {
    if ($SkipBuild) {
        Write-Host "‚è≠Ô∏è Build ignor√©" -ForegroundColor Yellow
        return
    }
    
    Write-Host "üî® Construction de l'application..." -ForegroundColor Yellow
    
    # Build frontend
    Write-Host "üî® Build frontend..." -ForegroundColor Cyan
    Set-Location $FrontendPath
    npm run build
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå √âchec du build frontend"
        exit 1
    }
    
    Set-Location $ProjectRoot
    Write-Host "‚úÖ Application construite avec succ√®s" -ForegroundColor Green
}

# Fonction pour cr√©er une release Git
function New-GitRelease {
    Write-Host "üè∑Ô∏è Cr√©ation de la release Git..." -ForegroundColor Yellow
    
    # V√©rifier que nous sommes sur develop
    $currentBranch = git rev-parse --abbrev-ref HEAD
    if ($currentBranch -ne "develop") {
        Write-Host "üîÑ Basculement vers la branche develop..." -ForegroundColor Cyan
        git checkout develop
    }
    
    # Cr√©er une branche de release
    $releaseBranch = "release/$Version"
    Write-Host "üåø Cr√©ation de la branche $releaseBranch..." -ForegroundColor Cyan
    git checkout -b $releaseBranch
    
    # Mettre √† jour la version dans package.json
    $packageJsonPath = Join-Path $ProjectRoot "package.json"
    if (Test-Path $packageJsonPath) {
        $packageJson = Get-Content $packageJsonPath | ConvertFrom-Json
        $packageJson.version = $Version
        $packageJson | ConvertTo-Json -Depth 10 | Set-Content $packageJsonPath
        
        git add $packageJsonPath
        git commit -m "chore: bump version to $Version"
    }
    
    # Merger vers main si c'est la production
    if ($Environment -eq "production") {
        Write-Host "üîÑ Merge vers main pour la production..." -ForegroundColor Cyan
        git checkout main
        git merge $releaseBranch --no-ff -m "Release $Version"
        
        # Cr√©er un tag
        git tag -a "v$Version" -m "Release v$Version"
        
        # Retourner sur develop et merger les changements
        git checkout develop
        git merge main
    }
    
    Write-Host "‚úÖ Release Git cr√©√©e: v$Version" -ForegroundColor Green
}

# Fonction pour d√©ployer selon l'environnement
function Deploy-ToEnvironment {
    Write-Host "üöÄ D√©ploiement vers $Environment..." -ForegroundColor Yellow
    
    switch ($Environment) {
        "development" {
            Write-Host "üîß D√©ploiement en d√©veloppement..." -ForegroundColor Cyan
            # D√©marrer les serveurs de d√©veloppement
            Write-Host "‚ÑπÔ∏è Pour d√©marrer en mode d√©veloppement, utilisez: npm run dev" -ForegroundColor Blue
        }
        "staging" {
            Write-Host "üß™ D√©ploiement en staging..." -ForegroundColor Cyan
            # Logique de d√©ploiement staging
            Write-Host "‚ÑπÔ∏è D√©ploiement staging √† impl√©menter" -ForegroundColor Blue
        }
        "production" {
            Write-Host "üåê D√©ploiement en production..." -ForegroundColor Cyan
            # Logique de d√©ploiement production
            Write-Host "‚ÑπÔ∏è D√©ploiement production √† impl√©menter" -ForegroundColor Blue
        }
    }
}

# Fonction principale
function Main {
    try {
        Test-Prerequisites
        Install-Dependencies
        Invoke-Tests
        Build-Application
        New-GitRelease
        Deploy-ToEnvironment
        
        Write-Host "üéâ D√©ploiement r√©ussi de Laevitas Trading Platform v$Version!" -ForegroundColor Green
        Write-Host "üìä Environnement: $Environment" -ForegroundColor Cyan
        Write-Host "üïí Termin√© √†: $(Get-Date)" -ForegroundColor Cyan
        
    } catch {
        Write-Error "‚ùå √âchec du d√©ploiement: $_"
        exit 1
    }
}

# Ex√©cution du script principal
Main